
-solution = question.accepted && question.answer_id == answer.id
-source = question_path(question)

-cache_for(:answers, question.id, answer.id, answer.user == current_user ? "owner" : "") do
  %article.answer{class: "#{answer.id} #{solution && "solution"}", id: "answer-#{answer.id}", item_scope: '', itemtype: "http://schema.org/Article"}
    %a{:name => "answer#{answer.id}"}

    .main-sidebar-left
      = vote_box(answer, question_path(@question), @question.closed)
      
    .main-content
      .content.markdown.clearfix
        .activity-info   
          .author
            .avatar_left
              = avatar_img(answer.user, :size => "small") unless answer.user && answer.anonymous
            .user_info
              %span
                = t('activerecord.attributes.question.answered_by')
              = render "questions/answered_by", local_assigns
              %time{:datetime => answer.created_at.iso8601,  :itemprop=>"datePublished", :title => article_date(answer)}
                = link_to article_date(answer), question_answer_path(@question.id, answer.id), :itemprop => "url"
          .author             
            - if answer.created_at != answer.updated_at && answer.updated_by
              .avatar_left
                = avatar_img(@question.last_target_user, :size => "small") unless @question.last_target_user && @question.anonymous
              .user_info
                %span
                  = t('global.updated_by')
                = render "users/user_mini", user: answer.updated_by
                %time{datetime: @question.last_target_date.iso8601, itemprop: "dateModified"}
                  = link_to edited_date(answer), history_question_answer_path(@question.id, answer.id), :title => t("questions.show.history")+" (#{answer.versions_count})"

        .answer_body{:itemprop => "articleBody"}
          = find_and_preserve(shapado_auto_link(markdown(answer.body), :link_users => true))

        -if logged_in? && (current_user.mod_of?(current_group) || current_user.can_view_offensive_counts_on?(current_group)) && answer.flags.count > 0
          %h3
            = t(:flags, :scope => "activerecord.models")
            = render :partial => "flags/list", :locals => {:flaggeable => answer}
            
      %div{style: "float:right; clear:both; margin:6px 0 0 0; padding:0"}   
        = render "questions/answer_toolbar", :question => @question, :answer => answer, :solution => solution
      .clear{style: "clear:both"}  
        
      .comments
        =link_to "#{content_tag(:span, "NN", class: "counter")} comments".html_safe, "#", class: "toggle_comments"
        -answer.comments.each do |comment|
          -read = (@last_read_at && @last_read_at > comment.created_at && comment.votes_average < 2)
          = render "comments/comment", comment: comment, source: question_path(@question), mini: true, read: read

      .panel-comments
        = form_for [@question, answer, @comment ||= Comment.new], remote: true, html: {class: "answer_comment_form", data: {commentable: answer.id, editor: current_group.wysiwyg_editor ? 'wysiwyg_editor' : 'markdown_editor', "login-required" => true}} do |f|
          %fieldset
            = render :partial => "comments/form", :locals => {:f => f, :source => source, :commentable => answer }
            .buttons
              = submit_tag t("comments.shared.comment_submit")
              = t("global.or")
              = link_to t('scaffold.cancel'), '', :class => 'cancel cancel_comment'
      .article-forms
      
    .clear{style: "clear:both"}  