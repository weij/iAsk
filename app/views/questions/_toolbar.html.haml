- i18n_scope = "questions.show"
- show_close_request_form = !@question.closed && logged_in? && @question.can_be_requested_to_close_by?(current_user)

- show_open_request_form = @question.closed && logged_in? && @question.can_be_requested_to_open_by?(current_user)

-if logged_in? && current_user.mod_of?(current_group)
  -show_open_request_form = false
  -show_close_request_form = false

- if logged_in?
  - @flag = current_user.has_flagged?(@question) || Flag.new

- @flag ||= Flag.new

- if show_open_request_form
  - @open_request = current_user.has_requested_to_open?(@question) || OpenRequest.new

- if show_close_request_form
  - @close_request = @question.close_requests.detect{ |rq| rq.user_id == current_user.id } || CloseRequest.new(:reason => "dupe")

.toolbar
  %ul.menubar
    -if !logged_in? || current_user.can_answer_on?(current_group)
      %li.answer.action
        = link_to t("questions.question.answer_verb"), "#to_answer", :id => "add_answer"


    %li.follow.action
      - if current_user && @question.follower?(current_user)
        = link_to t('global.unfollow'), unfollow_question_path(@question), :class => 'unfollow-q toggle-action', "data-undo" =>  follow_question_path(@question), "data-title" => t("#{i18n_scope}.follow_tooltip"), :title => t("#{i18n_scope}.unfollow_tooltip"), 'data-text' => t('global.follow'), "rel" => 'nofollow'
      - else
        = link_to t('global.follow'), follow_question_path(@question), :title => t("#{i18n_scope}.follow_tooltip"), :class => 'follow-q toggle-action', "data-undo" =>  unfollow_question_path(@question), "data-title" => t("#{i18n_scope}.unfollow_tooltip"), 'data-text' => t('global.unfollow'), "rel" => 'nofollow'

    - if !@flag.new_record?
      %li.flagged
        %span.flag-link
          = t('questions.answer_toolbar.flagged_by_you')
        %ul.drop-menu
          %li
            %p
              = t(@flag.reason, :scope=>'flags.form')
              = link_to t("scaffold.edit"), edit_question_flag_path(@question,@flag), :id => "edit_question_flag_link", :class => "flag-link show_form", :rel => 'nofollow', "data-lazy" => "1", "data-form-target" => "flag_question"
              = link_to t("scaffold.destroy"), question_flag_path(@question,@flag), :id => "destroy_question_flag_link", :rel => 'nofollow', :confirm => t('scaffold.are_you_sure'), :method => :delete
    - elsif current_user != @question.user
      - if !logged_in? || !current_user.mod_of?(current_group)
        %li.no-spam.action
          = link_to t("#{i18n_scope}.flag"), new_question_flag_path(@question), :id => "flag_question", :class => "flag-link", "data-lazy" => "1", :rel => 'nofollow', :class => "show_form"

    - if logged_in?
      -if current_user.can_create_reward?(@question)
        %li.add_reward.action
          = link_to t("#{i18n_scope}.create_reward"), "#", :rel => "nofollow", :id => "add_reward", :class => "show_form", :title => t("#{i18n_scope}.create_reward_description")
      = render "requests_menu", :question => @question, :i18n_scope => i18n_scope

    %li.followUp.action
      = link_to t("#{i18n_scope}.follow_up"), new_question_path(:from_question => @question.id), :rel => "nofollow", :title => t("#{i18n_scope}.follow_up_description")

    - if show_close_request_form && !@close_request.new_record?
      %li.more.request-close
        = link_to I18n.t('questions.toolbar.your_close_request')
        =#t("questions.toolbar.requested_close_as")
        %ul.drop-menu
          %li
            %p
              = t(@close_request.reason, :scope=>'close_requests.form')
              = link_to t('scaffold.edit'), edit_question_close_request_path(@question,@close_request), :id => "edit_question_close_request_link", :rel => 'nofollow', "data-lazy" => "1"
              = link_to t('close_requests.form.retract'), question_close_request_path(@question,@close_request), :id => "destroy_question_close_request_link", :rel => 'nofollow', :confirm => t('scaffold.are_you_sure'), :method => :delete

    - if logged_in?
      %li.more.current.action
        = link_to t("#{i18n_scope}.more_actions"), "#"

        %ul.drop-menu
          - if logged_in?
            - if show_close_request_form && @close_request.new_record?
              %li.spam
                = link_to t("#{i18n_scope}.request_closing"), @close_request.new_record? ? new_question_close_request_path(@question) : edit_question_close_request_path(@question, @close_request), :id => "request-close-link", :class => "show_form", "data-lazy" => "1", :rel => 'nofollow', :title => t("#{i18n_scope}.request_closing_details")

            - if @question.wiki && current_user.can_edit_wiki_post_on?(@question.group) || current_user.can_edit_others_posts_on?(@question.group) || current_user.can_modify?(@question)
              %li.edit-q
                = link_to t('scaffold.edit'), edit_question_path(@question)

            - if (current_user.can_modify?(@question) || current_user.owner_of?(@question.group))
              %li.delete-q
                = link_to t("scaffold.destroy"), question_path(@question), :confirm => t('scaffold.are_you_sure'), :method => :delete

          - if show_open_request_form
            -if !@open_request.new_record?
              %li.open
                = "#{t('#{i18n_scope}.requested_reopening')} #{@open_request.comment}"
                = link_to t("#{i18n_scope}.edit_request"), edit_question_open_request_path(@question, @open_request), :id => "edit_question_open_request_link", :rel => 'nofollow'
                = link_to t("#{i18n_scope}.retract_request"), question_open_request_path(@question,@open_request), :id => "destroy_question_open_request_link", :rel => 'nofollow', :confirm => t('scaffold.are_you_sure'), :method => :delete
            - else
              %li.open
                = link_to t("#{i18n_scope}.request_opening"), new_question_open_request_path(@question), :id => "request-open-link", :rel => 'nofollow', :title => t("#{i18n_scope}.request_opening_details")

            - if current_user.can_modify?(@question) || current_user.owner_of?(@question.group)
              %li.delete
                = link_to t("scaffold.destroy"), question_path(@question.id), :confirm => t('scaffold.are_you_sure'), :method => :delete


  #panel-forms.clearfix
    = render "reward_form"
