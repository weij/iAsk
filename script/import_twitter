#!/usr/bin/env ruby

ENV["RAILS_ENV"] ||= (ARGV[0] || "development")

# require File.expand_path("../../config/environment", __FILE__)
require "#{File.expand_path("../..", __FILE__)}/lib/shapado/scripting/easy_loader"

require 'twitter'
require 'twitter-text'
require 'whatlanguage'

class TwitterBot
  def initialize
    @extractor = Object.new
    @extractor.extend(Twitter::Extractor)
  end

  def search(keyword, &block)
    begin
      @searcher = Twitter::Search.new
      @searcher.containing(keyword).result_type("recent").each do |status|
        block.call(status)
      end
    rescue Crack::ParseError
    end
  end

  def run!
    Timeout.timeout(4.minutes.to_i) do
      Group.where("share.enable_twitter" => true).all.each do |group|
        begin
          process_group(group)
        rescue Exception => e
          puts "WARNING: #{e} #{e.backtrace.join("\n\t")}"
        end
      end
    end
  rescue Timeout::Error
    $stderr.puts "Terminating... execution took longer than expected"
  end

  private
  def process_group(group)
    return if group.share.twitter_user.blank?

    share = group.share
    default_date = (Time.now - 5.days).utc
    last_date = (group[:last_twitter_question_at] ||default_date) rescue default_date

    since = last_date.strftime("%Y-%m-%d")

    query = "#{share.twitter_pattern} to:#{share.twitter_user} '?'"
    puts "Processing #{group.name}. query=#{query.inspect}"
    self.search(query.strip) do |status|
      id = status[:id]
      date = Time.parse(status[:created_at]).utc
      if date < last_date
        next
      end

      if status[:text] =~ /\b(RT|via) @/ || Question.first(:twitter_source => status[:id], :select => [:_id]).present?
        next
      end

      status_text = status[:text]
      username = status[:from_user]

      puts "#{status_text.inspect} --@#{username}"

      user = User.first(:twitter_login => username)
      if user.present?
        username = user.login
      else
        user = User.new(:anonymous => true, :login => "#{username}_twitter", :twitter_login => username, :from_twitter => true)
        user.save(:validate => false)
      end

      title = status_text.gsub(/#{Regexp.escape(share.twitter_pattern)}|@#{Regexp.escape(share.twitter_user)}/i, "").strip
      tags = Set.new(@extractor.extract_hashtags(status_text))

      body = title

      language = group.language
      if language.nil?
        language = find_language(status_text)
      end

      if user.nil?
        user = group.owner.present? ? group.owner : User.first(:login => "admin")
      end

      question = Question.create!(:title => title[0,100],
                                  :tags => tags,
                                  :body => body,
                                  :group => group,
                                  :user => user,
                                  :language => language,
                                  :twitter_source => status[:id])
    end

    group.set({:last_twitter_question_at => last_date})
    group[:last_twitter_question_at] = last_date
  end

  private
  def find_language(text)
    case text.gsub(/<\/?[^>]*>/, "").language
    when :spanish
      'es'
    when :french
      'fr'
    when :portuguese
      'pt'
    else
      'en'
    end
  end
end

TwitterBot.new.run!
